package com.doc.entity.product;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.Comment;

import java.time.LocalDate;
import java.util.Date;
import java.util.Locale;

/**
 * Entity mapping products to milestones with order and rules.
 */
@Entity
@Table(name = "product_milestone_map")
@Getter
@Setter
@NoArgsConstructor
public class ProductMilestoneMap {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Comment("Primary key: Mapping ID")
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "product_id", nullable = false)
    @Comment("Associated product")
    private Product product;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "milestone_id", nullable = false)
    @Comment("Associated milestone")
    private Milestone milestone;

    @Column(name = "step_order", nullable = false)
    @Comment("Order of the milestone in the product workflow")
    private int order;

    @Column(name = "tat_in_days", nullable = false)
    @Comment("Turnaround time in days for this milestone")
    private double tatInDays;

    @Column(name = "rollback_tat_in_days")
    @Comment("Rollback turnaround time in days, if applicable")
    private Double rollbackTatInDays;

    @Column(name = "strict_approval", nullable = false)
    @Comment("Whether approval is mandatory")
    private boolean strictApproval = false;

    @Column(name = "allow_rollback", nullable = false)
    @Comment("Whether rollback is allowed")
    private boolean allowRollback = false;

    @Column(name = "max_attempts", nullable = false)
    @Comment("Maximum retry attempts for disapproval")
    private int maxAttempts = 1;

    @Column(name = "is_mandatory", nullable = false)
    @Comment("Whether the milestone is required")
    private boolean isMandatory = true;

    @Column(name = "payment_percentage", nullable = false)
    @Comment("Percentage of total payment to unlock milestone")
    private double paymentPercentage;

//    @Column(name = "status", nullable = false)
//    @Comment("Milestone status: LOCKED, UNLOCKED, IN_PROGRESS, COMPLETED")
//    private String status = "LOCKED";

    @Column(name = "is_auto_generated", nullable = false)
    @Comment("Whether the milestone is auto-generated (e.g., Certification)")
    private boolean isAutoGenerated = false;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(updatable = false)
    private Date createdDate;

    @Temporal(TemporalType.TIMESTAMP)
    private Date updatedDate;

    private LocalDate date;
}